from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.conf import settings
import requests
from .models import Bouquet, Cart, CartItem, Order, OrderItem
from .forms import OrderForm
from django.db import transaction

from django.http import HttpResponse
import logging

logger = logging.getLogger(__name__)

def test_order(request):
    logger.info("=== –¢–ï–°–¢: test_order –≤—ã–∑–≤–∞–Ω ===")
    print("\n=== –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ ===")
    return HttpResponse("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–∞")

def index(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—É–∫–µ—Ç–æ–≤"""
    bouquets = Bouquet.objects.filter(is_active=True)
    return render(request, 'bouquets/index.html', {
        'bouquets': bouquets,
        'user': request.user
    })


@login_required
def add_to_cart(request, bouquet_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    bouquet = get_object_or_404(Bouquet, id=bouquet_id)
    cart, _ = Cart.objects.get_or_create(user=request.user)

    item, created = cart.add_item(bouquet)

    messages.success(
        request,
        f"'{bouquet.name}' {'–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É' if created else '—É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ +1)'}"
    )
    return redirect('bouquets:catalog')


@login_required
def remove_from_cart(request, item_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_item = get_object_or_404(
        CartItem,
        id=item_id,
        cart__user=request.user
    )
    bouquet_name = cart_item.bouquet.name
    cart_item.delete()

    messages.success(request, f"'{bouquet_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    return redirect('bouquets:view_cart')


@login_required
def update_cart_item(request, item_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    if request.method == 'POST':
        cart_item = get_object_or_404(
            CartItem,
            id=item_id,
            cart__user=request.user
        )
        action = request.POST.get('action')
        quantity = int(request.POST.get('quantity', cart_item.quantity))

        if action == 'increase':
            cart_item.quantity += 1
        elif action == 'decrease':
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
            else:
                cart_item.delete()
                messages.success(request, "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                return redirect('bouquets:view_cart')
        else:
            if quantity >= 1:
                cart_item.quantity = quantity
            else:
                cart_item.delete()
                messages.success(request, "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                return redirect('bouquets:view_cart')

        cart_item.save()
        messages.success(request, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    return redirect('bouquets:view_cart')


@login_required
def view_cart(request):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_object_or_404(Cart, user=request.user)
    return render(request, 'bouquets/cart.html', {
        'cart': cart,
        'title': '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞'
    })


@login_required
def clear_cart(request):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_object_or_404(Cart, user=request.user)
    cart.clear()
    messages.success(request, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    return redirect('bouquets:view_cart')


def send_telegram_notification(order):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        items_text = "\n".join(
            f"‚Ä¢ {item.bouquet.name} √ó {item.quantity} = {item.price * item.quantity}‚ÇΩ"
            for item in order.items.all()
        )

        message = (
            f"üõç *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}*\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user.username}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            f"üíê –°–æ—Å—Ç–∞–≤:\n{items_text}\n"
            f"üíµ –ò—Ç–æ–≥–æ: {order.total_price}‚ÇΩ\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–Ω–µ—Ç'}"
        )

        print(f"\n=== –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram ===\n{message}\n=====================\n")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        response = requests.post(
            f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage",
            json={
                'chat_id': settings.TELEGRAM_CHAT_ID,
                'text': message,
                'parse_mode': 'Markdown'
            },
            timeout=5
        )
        print(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.json()}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        return True
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏
        return False


@login_required
def create_order(request):
    cart = get_object_or_404(Cart, user=request.user)

    if not cart.items.exists():
        messages.error(request, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return redirect('bouquets:view_cart')

    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            try:
                with transaction.atomic():
                    order = form.save(commit=False)
                    order.user = request.user
                    order.total_price = cart.total_price
                    order.save()

                    for item in cart.items.all():
                        OrderItem.objects.create(
                            order=order,
                            bouquet=item.bouquet,
                            quantity=item.quantity,
                            price=item.bouquet.price
                        )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–¥–∏–Ω –≤—ã–∑–æ–≤!)
                    if not send_telegram_notification(order):
                        messages.warning(request, "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                    else:
                        messages.success(request, f"–ó–∞–∫–∞–∑ #{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")

                    cart.clear()
                    return redirect('bouquets:order_detail', order_id=order.id)

            except Exception as e:
                messages.error(request, f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")
                return redirect('bouquets:view_cart')

    return render(request, 'bouquets/create_order.html', {
        'form': OrderForm(),
        'cart': cart
    })

@login_required
def order_detail(request, order_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    order = get_object_or_404(
        Order,
        id=order_id,
        user=request.user
    )
    return render(request, 'bouquets/order_detail.html', {
        'order': order,
        'title': f'–ó–∞–∫–∞–∑ #{order.id}'
    })